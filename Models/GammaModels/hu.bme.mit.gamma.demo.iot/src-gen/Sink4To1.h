/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef SINK4TO1_H_
#define SINK4TO1_H_

#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'Sink4To1'.
*/

/*! Define number of states in the state enum */

#define SINK4TO1_STATE_COUNT 1

/*! Define dimension of the state configuration vector for orthogonal states. */
#define SINK4TO1_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_SINK4TO1_MAIN_REGION_MAIN 0

/*! Enumeration of all states */ 
typedef enum
{
	Sink4To1_last_state,
	Sink4To1_main_region_Main
} Sink4To1States;

/*! Type definition of the data structure for the Sink4To1IfaceIn1 interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
} Sink4To1IfaceIn1;



/*! Type definition of the data structure for the Sink4To1IfaceIn2 interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
} Sink4To1IfaceIn2;



/*! Type definition of the data structure for the Sink4To1IfaceIn3 interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
} Sink4To1IfaceIn3;



/*! Type definition of the data structure for the Sink4To1IfaceIn4 interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
} Sink4To1IfaceIn4;



/*! Type definition of the data structure for the Sink4To1IfaceOut interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
} Sink4To1IfaceOut;




/*! 
 * Type definition of the data structure for the Sink4To1 state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	Sink4To1States stateConfVector[SINK4TO1_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	Sink4To1IfaceIn1 ifaceIn1;
	Sink4To1IfaceIn2 ifaceIn2;
	Sink4To1IfaceIn3 ifaceIn3;
	Sink4To1IfaceIn4 ifaceIn4;
	Sink4To1IfaceOut ifaceOut;
} Sink4To1;



/*! Initializes the Sink4To1 state machine data structures. Must be called before first usage.*/
extern void sink4To1_init(Sink4To1* handle);

/*! Activates the state machine */
extern void sink4To1_enter(Sink4To1* handle);

/*! Deactivates the state machine */
extern void sink4To1_exit(Sink4To1* handle);

/*! Performs a 'run to completion' step. */
extern void sink4To1_runCycle(Sink4To1* handle);


/*! Raises the in event 'NewData' that is defined in the interface scope 'In1'. */ 
extern void sink4To1IfaceIn1_raise_newData(Sink4To1* handle);

/*! Raises the in event 'NewData' that is defined in the interface scope 'In2'. */ 
extern void sink4To1IfaceIn2_raise_newData(Sink4To1* handle);

/*! Raises the in event 'NewData' that is defined in the interface scope 'In3'. */ 
extern void sink4To1IfaceIn3_raise_newData(Sink4To1* handle);

/*! Raises the in event 'NewData' that is defined in the interface scope 'In4'. */ 
extern void sink4To1IfaceIn4_raise_newData(Sink4To1* handle);

/*! Checks if the out event 'NewData' that is defined in the interface scope 'Out' has been raised. */ 
extern sc_boolean sink4To1IfaceOut_israised_newData(const Sink4To1* handle);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean sink4To1_isActive(const Sink4To1* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean sink4To1_isFinal(const Sink4To1* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean sink4To1_isStateActive(const Sink4To1* handle, Sink4To1States state);


#ifdef __cplusplus
}
#endif 

#endif /* SINK4TO1_H_ */
