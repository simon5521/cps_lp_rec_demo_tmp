/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef LB_PROVIDER_H_
#define LB_PROVIDER_H_

#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'LB_Provider'.
*/

/*! Define number of states in the state enum */

#define LB_PROVIDER_STATE_COUNT 3

/*! Define dimension of the state configuration vector for orthogonal states. */
#define LB_PROVIDER_MAX_ORTHOGONAL_STATES 1


/*! Define indices of states in the StateConfVector */
#define SCVI_LB_PROVIDER_MAIN_REGION_LOADING 0
#define SCVI_LB_PROVIDER_MAIN_REGION_SENDING 0
#define SCVI_LB_PROVIDER_MAIN_REGION_REQUESTSUBSCCRIBER 0

/*! Enumeration of all states */ 
typedef enum
{
	LB_Provider_last_state,
	LB_Provider_main_region_Loading,
	LB_Provider_main_region_Sending,
	LB_Provider_main_region_RequestSubsccriber
} LB_ProviderStates;

/*! Type definition of the data structure for the LB_ProviderInternal interface scope. */
typedef struct
{
	sc_integer queue_length;
	sc_integer package_number;
	sc_string id;
	sc_string subscriber_id;
	sc_integer min_load_num;
	sc_integer send_cntr;
	sc_integer send_cntr_max;
} LB_ProviderInternal;



/*! Type definition of the data structure for the LB_ProviderIfaceOutStream interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
	sc_string NewData_value;
} LB_ProviderIfaceOutStream;



/*! Type definition of the data structure for the LB_ProviderIfaceInStream interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
} LB_ProviderIfaceInStream;



/*! Type definition of the data structure for the LB_ProviderIfaceOutStreamAck interface scope. */
typedef struct
{
	sc_boolean NewData_raised;
} LB_ProviderIfaceOutStreamAck;



/*! Type definition of the data structure for the LB_ProviderIfaceLogger interface scope. */
typedef struct
{
	sc_boolean DataLoss_raised;
} LB_ProviderIfaceLogger;



/*! Type definition of the data structure for the LB_ProviderIfaceOutComm interface scope. */
typedef struct
{
	sc_boolean NewWorker_raised;
	sc_string NewWorker_value;
} LB_ProviderIfaceOutComm;



/*! Type definition of the data structure for the LB_ProviderIfaceInComm interface scope. */
typedef struct
{
	sc_boolean NewWorker_raised;
	sc_string NewWorker_value;
} LB_ProviderIfaceInComm;




/*! 
 * Type definition of the data structure for the LB_Provider state machine.
 * This data structure has to be allocated by the client code. 
 */
typedef struct
{
	LB_ProviderStates stateConfVector[LB_PROVIDER_MAX_ORTHOGONAL_STATES];
	sc_ushort stateConfVectorPosition; 
	
	LB_ProviderInternal internal;
	LB_ProviderIfaceOutStream ifaceOutStream;
	LB_ProviderIfaceInStream ifaceInStream;
	LB_ProviderIfaceOutStreamAck ifaceOutStreamAck;
	LB_ProviderIfaceLogger ifaceLogger;
	LB_ProviderIfaceOutComm ifaceOutComm;
	LB_ProviderIfaceInComm ifaceInComm;
} LB_Provider;



/*! Initializes the LB_Provider state machine data structures. Must be called before first usage.*/
extern void lB_Provider_init(LB_Provider* handle);

/*! Activates the state machine */
extern void lB_Provider_enter(LB_Provider* handle);

/*! Deactivates the state machine */
extern void lB_Provider_exit(LB_Provider* handle);

/*! Performs a 'run to completion' step. */
extern void lB_Provider_runCycle(LB_Provider* handle);


/*! Checks if the out event 'NewData' that is defined in the interface scope 'OutStream' has been raised. */ 
extern sc_boolean lB_ProviderIfaceOutStream_israised_newData(const LB_Provider* handle);

/*! Gets the value of the out event 'NewData' that is defined in the interface scope 'OutStream'. */ 
extern sc_string lB_ProviderIfaceOutStream_get_newData_value(const LB_Provider* handle);

/*! Raises the in event 'NewData' that is defined in the interface scope 'InStream'. */ 
extern void lB_ProviderIfaceInStream_raise_newData(LB_Provider* handle);

/*! Raises the in event 'NewData' that is defined in the interface scope 'OutStreamAck'. */ 
extern void lB_ProviderIfaceOutStreamAck_raise_newData(LB_Provider* handle);

/*! Checks if the out event 'DataLoss' that is defined in the interface scope 'Logger' has been raised. */ 
extern sc_boolean lB_ProviderIfaceLogger_israised_dataLoss(const LB_Provider* handle);

/*! Checks if the out event 'NewWorker' that is defined in the interface scope 'OutComm' has been raised. */ 
extern sc_boolean lB_ProviderIfaceOutComm_israised_newWorker(const LB_Provider* handle);

/*! Gets the value of the out event 'NewWorker' that is defined in the interface scope 'OutComm'. */ 
extern sc_string lB_ProviderIfaceOutComm_get_newWorker_value(const LB_Provider* handle);

/*! Raises the in event 'NewWorker' that is defined in the interface scope 'InComm'. */ 
extern void lB_ProviderIfaceInComm_raise_newWorker(LB_Provider* handle, sc_string value);


/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean lB_Provider_isActive(const LB_Provider* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean lB_Provider_isFinal(const LB_Provider* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean lB_Provider_isStateActive(const LB_Provider* handle, LB_ProviderStates state);


#ifdef __cplusplus
}
#endif 

#endif /* LB_PROVIDER_H_ */
