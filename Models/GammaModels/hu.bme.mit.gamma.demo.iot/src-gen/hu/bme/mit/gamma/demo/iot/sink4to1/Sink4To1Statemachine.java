/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.gamma.demo.iot.sink4to1;


public class Sink4To1Statemachine implements ISink4To1Statemachine {
	protected class SCIIn1Impl implements SCIIn1 {
	
		private boolean newData;
		
		
		public void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
			newData = false;
		}
	}
	
	
	protected class SCIIn2Impl implements SCIIn2 {
	
		private boolean newData;
		
		
		public void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
			newData = false;
		}
	}
	
	
	protected class SCIIn3Impl implements SCIIn3 {
	
		private boolean newData;
		
		
		public void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
			newData = false;
		}
	}
	
	
	protected class SCIIn4Impl implements SCIIn4 {
	
		private boolean newData;
		
		
		public void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
			newData = false;
		}
	}
	
	
	protected class SCIOutImpl implements SCIOut {
	
		private boolean newData;
		
		
		public boolean isRaisedNewData() {
			return newData;
		}
		
		protected void raiseNewData() {
			newData = true;
		}
		
		protected void clearEvents() {
		}
		protected void clearOutEvents() {
		
		newData = false;
		}
		
	}
	
	
	protected SCIIn1Impl sCIIn1;
	
	protected SCIIn2Impl sCIIn2;
	
	protected SCIIn3Impl sCIIn3;
	
	protected SCIIn4Impl sCIIn4;
	
	protected SCIOutImpl sCIOut;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Main,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	public Sink4To1Statemachine() {
		sCIIn1 = new SCIIn1Impl();
		sCIIn2 = new SCIIn2Impl();
		sCIIn3 = new SCIIn3Impl();
		sCIIn4 = new SCIIn4Impl();
		sCIOut = new SCIOutImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Main:
				main_region_Main_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIIn1.clearEvents();
		sCIIn2.clearEvents();
		sCIIn3.clearEvents();
		sCIIn4.clearEvents();
		sCIOut.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCIOut.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Main:
			return stateVector[0] == State.main_region_Main;
		default:
			return false;
		}
	}
	
	public SCIIn1 getSCIIn1() {
		return sCIIn1;
	}
	
	public SCIIn2 getSCIIn2() {
		return sCIIn2;
	}
	
	public SCIIn3 getSCIIn3() {
		return sCIIn3;
	}
	
	public SCIIn4 getSCIIn4() {
		return sCIIn4;
	}
	
	public SCIOut getSCIOut() {
		return sCIOut;
	}
	
	/* 'default' enter sequence for state Main */
	private void enterSequence_main_region_Main_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Main;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Main */
	private void exitSequence_main_region_Main() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Main:
			exitSequence_main_region_Main();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Main_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Main_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIIn1.newData) {
					exitSequence_main_region_Main();
					sCIOut.raiseNewData();
					
					enterSequence_main_region_Main_default();
				} else {
					if (sCIIn2.newData) {
						exitSequence_main_region_Main();
						sCIOut.raiseNewData();
						
						enterSequence_main_region_Main_default();
					} else {
						if (sCIIn3.newData) {
							exitSequence_main_region_Main();
							sCIOut.raiseNewData();
							
							enterSequence_main_region_Main_default();
						} else {
							if (sCIIn3.newData) {
								exitSequence_main_region_Main();
								sCIOut.raiseNewData();
								
								enterSequence_main_region_Main_default();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
}
